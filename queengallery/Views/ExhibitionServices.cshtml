@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "Services.cshtml";
}

@{

    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();

    var pageSize = 10;
    var page = 1; int.TryParse(Request.QueryString["page"], out page);
    var year = 0; int.TryParse(Request.QueryString["year"], out year);
    var lang =  Request.QueryString["lang"] ;
    var kword =  Request.QueryString["word"];
    //kword =" Jehabdulloh ".ToLower();  //test
   
    if (kword !=null)
{
    kword = kword.ToLower();
} else
{
kword="";
}
   string yearSet="";
    var Type = Request.QueryString["Type"];

    var valuesFilter = new Dictionary<string, object>
    ();

    valuesFilter.Add("Todate", DateTime.Now);
    valuesFilter.Add("year",year);
    string condition = "";
    string sort = "beginDate descending";
    int blogId = 3576;
    int limit=20;
    var items = (dynamic)null;

    var  descriptionCol= "description"+lang;

    if (Type == "OnView")
    {
    condition = "  Visible && (beginDate <= Todate) && (endDate >= Todate)";

    items = Umbraco.Media(blogId).Children().Where(condition, valuesFilter).OrderBy("endDate");

    }
    else if (Type == "Upcoming")
    {
    @*All*@
    condition = "Visible && (beginDate > Todate)";

    items = Umbraco.Media(blogId).Children().Where(condition, valuesFilter).OrderBy(sort);
    }
    else if (Type == "Past")
    {

    //condition ="(from < Todate) && (!( (from <= Todate) && (to >= Todate)))";

    //items =  Umbraco.Content(blogId).Children().Where(condition,valuesFilter).OrderBy(sort);

    condition = "Visible && (beginDate < Todate) && (!( (beginDate <= Todate) && (endDate >= Todate)))";

    if  (year >0)
    {
    condition += " and ((beginDate.Year=year) or (endDate.Year=year))";
    }

    //condition += " && ("+descriptionCol+".ToLower().Contains(\""+kword+"\") || name"+lang+".ToLower().Contains(\""+kword+"\"))";

    //#For หาจาก ศิลปิน ====================================================================================
    if (kword.Trim() !="")
    {

    string c1 =genWhereCondition(kword,descriptionCol,lang);

    //condition += " && ("+descriptionCol+".ToLower().Contains(\""+kword+"\") || name"+lang+".ToLower().Contains(\""+kword+"\"))";
    condition +=c1;

    string  ConditionArtist=genWhereConditionArtist(kword);
    //var artisList=Umbraco.Media(1366).Children().Where("Name"+lang+".ToLower().Contains(\""+kword+"\")").Take(limit);
    //หาจากชื่อ ศิลปิน

    //@ConditionArtist
    //return;

    var artisList=Umbraco.Media(1366).Children().Where(ConditionArtist).Take(limit);

    List<string>
        listFilterEx = new List<string>
            ();
            foreach (var item in artisList)
            {
            //@item.id
            //Art Pieces ชิ้นงาน
            var ArtPiecesList=Umbraco.Media(item.id).Children().Take(limit);;
            foreach (var i in ArtPiecesList)
            {
            // ชิ้นงานดพื่อหา Ex
            //@i.id
            listFilterEx.Add("artPieces2.ToString().Contains(\""+i.id+"\")");
            }

            }//end loop

            //For หาจาก ชิ้นงาน ==================
            var itemsartPiecesMedia = Umbraco.Media(1366).Descendants("artPiecesMedia").Where("Name"+lang+".ToLower().Contains(\""+kword+"\")");
            foreach (var i in itemsartPiecesMedia)
            {
            // ชิ้นงานดพื่อหา Ex
            //@i.id
            listFilterEx.Add("artPieces2.ToString().Contains(\""+i.id+"\")");
            }

            //หา Ex จากชิ้นงานด้วย
            if (listFilterEx.Count> 0)
            {
            condition +=  " || ("   +string.Join<string>
                (" || ", listFilterEx) + ")";}
                //#For หาจาก ศิลปิน ====================================================================================

                //#For หาจาก ชิ้นงาน ====================================================================================
                }

                @*@condition
                return;*@

                items = Umbraco.Media(blogId).Children().Where(condition, valuesFilter).OrderBy(sort);

                //หา Year
                List<int>
                    list = new List<int>
                        ();

                        foreach (var item in items)
                        {
                        @* a single image *@

                        int a= item.beginDate.Year;
                        int b=item.endDate.Year;
                        list.Add(a);
                        list.Add(b);
                        }

                        var noDupes = list.Distinct().ToList();
                        noDupes.Sort();
                        yearSet=   String.Join(",", noDupes.ToArray());
                        }

                        var totalPages = (int)Math.Ceiling((double)items.Count() / (double)pageSize);

                        if (page > totalPages)
                        {
                        @*ถ้าเรียกมามากกว่า*@
                        page = totalPages;
                        }
                        else if (page < 1)
                        {
                        @*ถ้าเรียกมาน้อยกว่า*@
                        page = 1;
                        }

                        var jsonDataList = JsonFn.ConvertToJsonObject(items.Skip((page - 1) * pageSize).Take(pageSize));

                        jsonDataList.Add(new Dictionary<string, object>
    {            {"RecordCount",items.Count()},  {"year",yearSet}

    });

    }
    @* @Html.Raw(serializer.Serialize(items.Count())) *@
    @*Html.Raw(serializer.Serialize(@JsonFn.ConvertToJsonObject(items.Skip((page -1)* pageSize).Take(pageSize))))*@
    @*@Html.Raw(serializer.Serialize(node.Properties));*@
    @*Json*@


    @Html.Raw(serializer.Serialize(jsonDataList))






    @functions {

    public static string genWhereCondition(string words,string  column,string lang)
    {
    string kwords = words.Trim();

    string[] wordArray= kwords.Split(' ');

    string command = "";
    string[] CondiotnSet;

    List<string>
        strList = new List<string>
            ();

             //foreach (var key in wordArray)
           // {
          
           // string filrteEn =  "descriptionEn.ToLower().Contains(\"" + key.ToString() + "\") || nameEn.ToLower().Contains(\"" + key.ToString() +"\")";

           // strList.Add(filrteEn);
       
           // string filrteTh =  "descriptionTh.ToLower().Contains(\"" + key.ToString() + "\") || nameTh.ToLower().Contains(\"" + key.ToString() +"\")";
           // strList.Add(filrteTh);
          //  } 

                         
                              //En
                              string filrteEn =  "descriptionEn.ToLower().Contains(\"" + words.ToString() + "\") || nameEn.ToLower().Contains(\"" + words.ToString() +"\")";
                              strList.Add(filrteEn);
                              //Th
                              string filrteTh =  "descriptionTh.ToLower().Contains(\"" + words.ToString() + "\") || nameTh.ToLower().Contains(\"" + words.ToString() +"\")";
                              strList.Add(filrteTh);
                           




            command = "&& (" +String.Join("||",strList )+  ")";

            return command;
            }


            }
            @functions {

            public static string genWhereConditionArtist(string words)
            {
            string kwords = words.Trim();

            string[] wordArray= kwords.Split(' ');

            string command = "";
            string[] CondiotnSet;

            List<string>
                strListEn = new List<string>();

    List<string>
        strListTh = new List<string>
            ();
            // "Name"+lang+".ToLower().Contains(\""+kword+"\")").Take(limit);
            foreach (var key in wordArray)
            {
            //En
            string filrteEn =  "NameEn.ToLower().Contains(\""+key.ToString()+"\")" ;

                                strListEn.Add(filrteEn);
            //Th
            string filrteTh =   "NameTh.ToLower().Contains(\""+key.ToString()+"\")";
                                strListTh.Add(filrteTh);
            }
            //En
            // string filrteEn =  "NameEn.ToLower().Contains(\""+words.ToString()+"\")" ;

            // strList.Add(filrteEn);
            //Th
            // string filrteTh =   "NameTh.ToLower().Contains(\""+words.ToString()+"\")";
            // strList.Add(filrteTh);
            command = "((" +String.Join("&&",strListEn )+  ") || (" +String.Join("&&",strListTh)+ "))";

            return command;
            }


            }
